stages:
  - train
  - test
  - build
  - deploy

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  HEROKU_STAGING_URL: https://$HEROKU_STAGING_APP.herokuapp.com/

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
 paths:
   - .cache/pip
   - venv/

train:
  stage: train
  image: python:3.8.5-buster
  script:
    - echo "Running ML training pipeline"
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - cd pipeline
    - pip install -r requirements.txt
    - export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_CE_KEY}"
    - python ./run_pipeline.py
  only:
    changes:
      - pipeline/VERSION
# only-changes doent work unfortunately for folders
# see https://gitlab.com/gitlab-org/gitlab-foss/-/issues/19813

test-pipeline:
  stage: test
  image: python:3.8.5-buster
  script:
    - echo "Running tests"
    - python -V               # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - cd pipeline
    - pip install -r requirements.txt
    - py.test tests/
  only:
    changes:
      - pipeline/VERSION

test-api:
  stage: test
  image: python:3.8.5-buster
  script:
    - echo "Running tests"
    - python -V               # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - cd docker-flask-app
    - pip install -r requirements.txt
    - py.test tests/
  only:
    changes:
      - docker-flask-app/VERSION

build:
  image: docker:19.03.12
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG_BRANCH: $CI_REGISTRY_IMAGE/hat_player:$CI_COMMIT_REF_SLUG
    IMAGE_TAG: $CI_REGISTRY_IMAGE/hat_player:$CI_COMMIT_SHA
  script:
    - echo "Building docker image"
    - cd docker-flask-app
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - docker image tag $IMAGE_TAG $IMAGE_TAG_BRANCH
    - docker push $IMAGE_TAG_BRANCH
  only:
    changes:
      - docker-flask-app/VERSION

staging:
  image: node:15.4.0-buster
  stage: deploy
  script:
    - apt-get update -qy
    - apt-get install -y git ruby-dev
    - gem install dpl
    - cd docker-flask-app
    - dpl --provider=heroku --app=$HEROKU_STAGING_APP --api-key=$HEROKU_STAGING_API_KEY
    - curl $HEROKU_STAGING_URL
  environment:
    name: staging
    url: $HEROKU_STAGING_URL
  only:
    refs:
      - master
    changes:
      - docker-flask-app/VERSION

production:
  image: node:15.4.0-buster
  stage: deploy
  script:
    - apt-get update -qy
    - apt-get install -y git ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_PRODUCTION_APP --api-key=$HEROKU_PRODUCTION_API_KEY
  only:
    - master
  when: manual

deploy-gke:
  stage: deploy
  image: google/cloud-sdk:257.0.0
  script:
    - echo $GCLOUD_K8S_KEY | base64 -d > ${HOME}/gcloud-k8s-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-k8s-key.json
    - gcloud config set project personal-cloud-project-id
    - gcloud config set compute/zone your-compute-zone
    - gcloud container clusters get-credentials production
    - kubectl set image deployment/hat-player hat-player=registry.gitlab.com/aguschin/the-hat-game/hat_player:${CI_COMMIT_SHA} -n app
  only:
    - master
  when: manual
